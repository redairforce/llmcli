# Default values for llmdev
# This is a YAML-formatted file.

# Namespace configuration
namespace: "ai"

# Image configuration
image:
  repository: "ghcr.io/redairforce/llmdev-edge"
  pullPolicy: Always
  tag: "edge"  # Use edge tag for development
  pullSecrets:
    - name: ghcr-secret

# User configuration (linuxserver.io uses 'abc' user with PUID/PGID mapping)
user:
  username: "abc"
  uid: 1000
  gid: 1000
  password: "simple123"  # Default password for SSH access

# SSH configuration
ssh:
  permitRootLogin: "no"
  passwordAuthentication: "no"
  # Add your SSH public keys here
  authorizedKeys:
    - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHuD660uRrp7hBsmkCuW/FfZcaUBqU0tNamxC+q9BZ5i Generated By Termius"

# Git configuration
git:
  userName: "redairforce"
  userEmail: "casey@williamchambless.com"

# Service configuration
service:
  type: ClusterIP
  ssh:
    port: 22
    nodePort: null

# Storage configuration
storage:
  home:
    size: "20Gi"
    storageClass: "longhorn-nvme"
  # Mount existing PVC for shared data
  appdata:
    enabled: true
    existingClaim: "appdata-pvc"
    mountPath: "/appdata"

# Resource limits
resources:
  main:
    limits:
      cpu: 6000m
      memory: 12Gi
    requests:
      cpu: 1000m
      memory: 2Gi


# Security configuration
rbac:
  create: false

serviceAccount:
  create: false
  name: "kubectl-mcp-service-account"

# API keys and tokens are managed via external dev-api-keys secret
# This follows the infrastructure pattern used by other applications
secretReferences:
  devApiKeys: "dev-api-keys"  # External secret containing development tokens

# Logging configuration
logging:
  level: "INFO"

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Development tools to install
devTools:
  # Install additional packages
  packages:
    - curl
    - wget
    - git
    - vim
    - nano
    - htop
    - jq
    - python3
    - python3-pip
    - nodejs
    - npm
    - golang-go
    - docker.io
    - kubectl
    - helm
  
  # Install development languages/runtimes
  languages:
    python: true
    nodejs: true
    golang: true
    rust: false
    java: false

# Startup command override (optional)
command: []
args: []

# Claude CLI configuration
claudeCli:
  # Version of Claude CLI to install (follows GitOps principles)
  # Update this version and commit to trigger CLI updates in development environment
  version: "1.0.93"  # Updated to latest version (August 2025)
  # Whether to force update on every pod start (not recommended for GitOps)
  forceUpdate: false

# Grok CLI configuration
grokCli:
  # Grok CLI installation disabled
  version: ""
  forceUpdate: false

# Puppeteer configuration (headless Chrome automation)
puppeteer:
  # Puppeteer installation disabled
  version: ""
  forceUpdate: false

# Playwright configuration (multi-browser automation)
playwright:
  # Version of Playwright to install (latest stable version)
  version: "1.55.0"  # Latest stable version with multi-browser support
  forceUpdate: false

# Google GenAI SDK configuration (formerly Gemini SDK)
# NOTE: Migrated from deprecated @google/generative-ai to @google/genai
googleGenAi:
  # Version of Google GenAI SDK to install (@google/genai)
  package: "@google/genai"
  version: "1.15.0"  # Latest version of new official Google GenAI SDK
  forceUpdate: false

# Velero CLI configuration
veleroCli:
  # Version of Velero CLI to install (matches deployed server: v1.16.1)
  version: "1.16.2"
  # SHA256 checksum for velero-v1.16.2-linux-amd64.tar.gz
  checksum: "40a13f9a2e787eb7b1e7a5c8db9662226f1c3462e5c9f97d362d9e408d8d7a31"
  forceUpdate: false

# MinIO CLI configuration
minioCli:
  # Version of MinIO CLI (mc) to install
  version: "RELEASE.2025-07-21T05-28-08Z"
  # SHA256 checksum for mc binary
  checksum: "ea4a453be116071ab1ccbd24eb8755bf0579649f41a7b94ab9e68571bb9f4a1e"
  forceUpdate: false

# MCP Server packages configuration (GitOps managed)
mcpServers:
  # Desktop Commander MCP server for terminal operations and file editing (official npx approach)
  desktopCommander:
    package: "@wonderwhy-er/desktop-commander"
    version: "0.2.10"
    forceUpdate: false
  
  # MCP SDK for Model Context Protocol
  mcpSdk:
    package: "@modelcontextprotocol/sdk"
    version: "1.17.4"
    forceUpdate: false
  
  # Claude usage reporting and analytics
  ccusage:
    package: "ccusage"
    version: "16.2.0"
    forceUpdate: false
  
  # Playwright MCP server for browser automation (official Microsoft server)
  playwrightMcp:
    package: "@playwright/mcp"
    version: "latest"  # Use latest version of official Microsoft package
    browser: "chrome"  # Browser to use: chrome, firefox, webkit, msedge
    headless: true  # Run in headless mode
    forceUpdate: false
  
  # Perplexity MCP server for AI-powered search and research
  perplexityMcp:
    package: "server-perplexity-ask"
    version: "latest"  # Use latest version of Perplexity MCP server
    forceUpdate: false

# Additional environment variables
env: []
  # - name: CUSTOM_VAR
  #   value: "custom_value"

# Additional volume mounts
extraVolumeMounts: []
  # - name: extra-volume
  #   mountPath: /extra
  #   readOnly: false

# Additional volumes
extraVolumes: []
  # - name: extra-volume
  #   emptyDir: {}

# Tailscale configuration
tailscale:
  # Enable Tailscale exposure for SSH access
  enabled: true
  # The operator will automatically create a proxy pod and assign a Tailscale hostname
  # Access via: ai-llmdev.tailnet.ts.net or assigned IP
